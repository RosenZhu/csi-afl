[OK] 1. longer size of shared memrory
    1) 2 * MAP_SIZE + pathID_size
        0 ~ MAP_SIZE-1: edge frequency
        MAP_SIZE ~ 2*MAP_SIZE - 1: examined or not, mimic re-instrumentation: 255 not examined; 0 examined
                        NO[pathID_size: 32 bytes, for path identifiers]
        pathID_size: use 4 bytes (u32) to record the path id
        2) edge_id: 0 ~
[OK] 2. mimic re-instrument: 
    shm[MAP_SIZE] ~ shm[2*MAP_SIZE - 1]
        [NO]pathID: 0 ~
            one bit indicate whether a path is examined or not
            1) (addr1, addr2, ID)
            2) location and value in the shared memeory
                shm: the pointer to shared memrory
                ### calculation ###
                
                N = (ID >> 3) + 2 * MAP_SIZE
                m = ID & 7
                shm[N] = shm[N] | (1 << m )
                ##################
[OK] 3. path ID: length 4 bytes
    1) Use a "set" to record all marks;
    2) one mark is the id of the related edge
    3ï¼‰copy the data in the set to the shared memroy
    3) calculate a cksum for the path marks in the main fuzzer

[OK] 4. loop: detect loops in static dynamic analysis
if there's a loop, assign more energy
    1) in tracer: for each edge, check the loop flag;
    2) record is_loop in queue;

[OK] 5. remove crasher
[OK] 6. oracle:
    instrument conditional ids
   1) exit according to shm[MAP_SIZE] ~ shm[2*MAP_SIZE - 1]
   2) set path identfier when exit
   3) leave path mark when executing, for path frequency

[OK] 7. tracer:
    tracer should run forkserver
    instrument conditional ids
    invoke when: new edges or new crashes
    1) set shm[MAP_SIZE] ~ shm[2*MAP_SIZE - 1]
    2) set shm[0 ~ MAP_SIZE-1], and frequency

[OK] 8. when a crash is exposed:
    1) invoke tracer
    2) save it according to AFL

[OK] 9. add a byte to record the exit code, in case the target program forks a new child.

start_forkserver(&tracer_fsrv_PID, &tracer_fsrv_ctlFD, &tracer_fsrv_stFD, FORKSRV_FD, tracer_argv); 
run_target(&tracer_child_PID, &tracer_fsrv_ctlFD, &tracer_fsrv_stFD, exec_tmout);
stop_forkserver(&tracer_fsrv_PID, &tracer_fsrv_ctlFD, &tracer_fsrv_stFD);


