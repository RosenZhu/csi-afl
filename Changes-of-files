### 
    #the environment PATH should include this directory, 
    #because the instrumented binary needs the shared library libCSIDyninst.so 
###

### three binaries:
    # 1. oracle: to test the new branch
        ** record addresses
        ** exit on new branch 
        ** only oracle does the mark things: wirte marks to file and shared memory
    # 2. tracer: record the address reached by an input
        ** record addresses
        ** don't exit on new branch
        ** only tracer write the edge addrs
            1) be used for tracing ,calibrate_case();
            2) when tracer reach a branch, it doesn't exit but only write down the addresses
            3) remove record addresses before run tracer
    # 3. crash: check for unique crash;
        ** don'trecord addresses
        ** exit on new branch
        ** only crasher stop at new crasher
        ** the addresses having been reached are from tracer
            1) add addresses from tracer results
    # 4. trimmer: for the stage of trimming
        ** don't record addresses
        ** don't exit on new branch
        ** only trimmer update the bitmap
        ** trimming is only used for saving cycles when doing deterministic checks
    ## dry_run--calibrate_case()--run_target(tracer)
    ## sync_fuzzers: run(tracer)
    ## fuzz_one()--trim_case()--run(tracer)
    ## fuzz_one()--common_fuzz_stuff()--run(oracle)
    ## common_fuzz_stuff()--save_if_interesting()--run(tracer)--stop(oracle)
            --stop(tracer)--instrument(oracle)--copy oracle to tracer
            --start(oracle)--start(tracer)
###

1. remove all "oracle_path"
    we don't need oracle to rewrite;
    we use "target_path" to re-instrument.

    1) void setup_oracle(u8 * path_to_oracle)

2. remove "blocks_seen"

3. change the words on the banner: show_stats()

4. add "remove_init_addrs()": remove addresses created by dry run

5. every time, calibrate() and trim_case() run, the recorded addresses files will duplicate the contents
    set oracle and tracer: oracle test the new branch; trimmer runs in trim_case()...

6. if oracle meets a crash and the crasher binary regard it as a unique crash, 
        the crasher binary has to be re-instrumented until it meets a crash with the same input

7. [Question] The first time forkserver starts up, the target binary will run through. 
    What are the inputs? Will no inputs cause fuzzing into wrong state?
    [A:] When forkserver starts up, it'll wait before executing fork();
            the standard input is filled by inputs (out_dir/.cur_inputs or out_file).

8. queue->exec_cksum: different inputs may have the same cksum

9. Unique Crash: 
    When crash happens, has_new_bits() help decide whether it's a new crash
        n=getchar(); 
        while(i< n){ func(i); }  // if i=50, func(i) is a bug

10. The return type of indirect branch (Dyninst::InstructionAPI::c_ReturnInsn) cannot be controlled by inputs,
    otherwise, it's a bug.

11. insert forkserver after getting addresses, thus the code about getting addresses will be executed only once.

12. don't instrument addresses before main (remove addresses before function main())

13. type of branches:
    # conditional jump: taken, not taken
        *A 'CondJumpTaken' edge is found after a conditional branch, 
        along the edge that is taken when the condition is true. 
        *A 'CondJumpNottaken' edge follows the path when the condition is not taken. 
    # indirect branch: indirect call, indirect jump, indirect return
    # uncontional jump: 'UncondJump' is used along an edge that flows out of an unconditional branch that is always taken. 
    # No jump: 'NonJump' is an edge that flows out of a basic block that does not end in a jump, but falls through into the next basic block.
14. trimmer doesn't need other instrumentations-rosen
        if(isTrimmer) return true;
**DON'T NEED TRIMMER
15. 1) oracle will be instrumented repeatedly, which means the hash of edges will be changed 
    every time after it's instrumented. 
    2) so oracle is not inserted the hash function.
    3) trimmer and tracer are instrumented only once, so the hash for each is fixed.

16. Path marks include marks in paths which will cause time out.


[TODO] 
    1) cannot find function main
       [DONE] use appImage to get functions, all instrumentable functions will be included.
    2) tracer doesn't work at all!!!
        [reason]: maybe the standard input should be set every time before run_target();
                    the standard input is a stream, whose file pointer will move every time a byte is read.
        [DONE]: it has to reset the input file (write_to_testcase()) every time before executing run_target().
    3) [DONE] the forkserver of trimmer can be started when needed
    4) [DONE] about the shared library
    5) change the names on banner:
            a. "no new bits (discarded)": it's actually the path collisions from afl, but detected by CSI

[INSTALL]
install dyninst-rerewrite:
https://github.com/mxz297/dyninst/tree/rerewriting

$ git clone https://github.com/mxz297/dyninst.git
$ cd dyninst
$ git checkout rerewriting
$ cd ..
$ mkdir */buildDyn101
$ cd buildDyn101

revert a commit
$ git log
copy a commit hash (the second hash)
$ git reset --hard <hash>

Configure Dyninst with CMake
cmake /path/to/dyninst/source -DCMAKE_INSTALL_PREFIX=/path/to/installation
$ cmake /downloads/dyninst/ -DCMAKE_INSTALL_PREFIX=/apps/buildDyn101/

NOTE: If Dyninst builds TBB from source, see the wiki for instructions on ensuring correct usage.

Build and install Dyninst in parallel

$ make install -jN


change the 'Dyn_ROOT' in Makefile
$ make clean && make all

[Note]
only for no-pie binaries.

[ENV]
export CSI_AFL_PATH=/apps/csi-afl
export PATH=$PATH:$CSI_AFL_PATH

#export DYNINSTAPI_RT_LIB=/apps/buildDyn101/lib/libdyninstAPI_RT.so
#export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/apps/buildDyn101/lib


export CSI_AFL_PATH=/home/nsc2s/Experiments/rosen/CSI/csi/csi-aflfast
export DYNINST_INSTALL=/apps/buildDyn101

[RUN]
chang to root
$ sudo su
$ echo core >/proc/sys/kernel/core_pattern
$ cd /sys/devices/system/cpu
$ echo performance | tee cpu*/cpufreq/scaling_governor
change back to user
$ exit (or press ctrl+D)

[] Don't forget to set the timeout

csi-afl -i [/path/to/seed/dir] -o [/path/to/out/dir] [optional_args] -- [/path/to/target] [target_args]

./csi-afl -i ../input/ -o ../output/cfafluniq1 -- ../binaries/lava-binaries/uniq 

./csi-aflfast -i ../input/ -o ../output/cffastuniq1 -- ../binaries/lava-binaries/uniq

./afl-fuzz -i ../inputs/ -o ../outputs/aflbase1 -Q ../../csi/csi/binaries/lava-binaries/base64
./afl-fuzz -i ../inputs/ -o ../outputs/fastbase1 -Q ../../csi/csi/binaries/lava-binaries/base64

[seed files]: csi/csi/binaries/lava-binaries; csi/csi/binaries/untracer/unbinaries/
./csi-afl -i ../binaries/untracer_bins/binutils/seed_dir -o ../output/cfaflbinutils1 -t 500 -- ../binaries/untracer_bins/binutils/readelf -a @@


1. audiofile/sfconvert: 
afl-fuzz-saveinputs -i seed_dir -o out_dir -t 500 -- ./audiofile-0.2.7/sfcommands/sfconvert @@ out.mp3 format aiff

2. binutils/readelf
afl-fuzz-saveinputs -i seed_dir -o out_dir -t 500 -Q -- ./binutils-2.30/binutils/readelf -a @@

3. cjson/cjson
afl-fuzz-saveinputs -i seed_dir -o out_dir -x json.dict -t 500 -Q -- ./cjson-1.7.7/fuzzing/cjson @@

4. libarchive/bsdtar
afl-fuzz-saveinputs -i seed_dir -o out_dir -t 500 -Q -- ./libarchive-3.3.2/bsdtar -O -xf @@

5. libjpeg/djpeg
afl-fuzz-saveinputs -i seed_dir -o out_dir -t 500 -Q -- ./jpeg-9c/djpeg @@

6.libksba/cert-basic
afl-fuzz-saveinputs -i seed_dir -o out_dir -t 500 -Q -- ./libksba-1.3.5/tests/cert-basic @@

7. poppler/pdftohtml
afl-fuzz-saveinputs -i seed_dir -x pdf.dict -o out_dir -t 500 -Q -- ./poppler-0.22.5/utils/pdftohtml @@

8. tcpdump/tcpdump
afl-fuzz-saveinputs -i seed_dir -o out_dir -t 500 -Q -- ./tcpdump-4.9.2/tcpdump -nr @@

9. lava/base64
afl-fuzz -i seed_dir -o out_dir -t 500 -Q -- ./lava_bins/base64 -d @@

10. lava/md5sum
afl-fuzz -i seed_dir -o out_dir -t 500 -Q -- ./lava_bins/md5sum @@

11. lava/uniq
afl-fuzz -i seed_dir -o out_dir -t 500 -Q -- ./lava_bins/uniq

9. lava/who
afl-fuzz -i seed_dir -o out_dir -t 500 -Q -- ./lava_bins/who @@


[Core word]
1. runtime edge detect
2. the number of instrumentations would be less


[PROBLEMS]
1. unique_hangs is not calculated in function save_if_interesting().

2. the edge type 'NonJump' will cause some problems: the fuzzing will not reach new edges.

3. at one instrumentation point, there may have more than one points that can be instrumented.

4. some inputs,which find new edges, will cause time out. how to treat these inputs?

[INSERT LOCATION PROBLEMS]
the instrumentation of the following functions in programs will result in segfault.
1. cjson/cjson
cJSON_Delete(): 
[Reason] indirect call
    
2. binutils/readelf
get_file_header()
get_32bit_section_headers()
get_elf_section_flags.isra.41()
get_program_headers.part.43()

indirect jump: the number of instrument point is 2
[Reason] indirect call, condition not taken
not taken crash addresses:
4240967
4241366
4241356
4240983
4253636
4252988
4252046
4336276

3. libksba/cert-basic: A LOT ERROR
_ksba_calloc()
KSBA error on file `../binaries/untracer_bins/libksba/seed_dir/betsy.crt': ASN.1 module not found:
    [Reason] conditional jump taken, 

segfault: 
    [Reason] conditional jump not taken, 

4. poppler/pdftohtml
_ZN6PDFDoc12getStartXRefEv()???
[Reason] contional jump not taken

5.libjpeg/djpeg
[Reason] indirect call

6. libarchive/bsdtar
indirect call: the number of instrument point is 2

7. tcpdump/tcpdump
to test tcpdump, install dependencies:
apt-get install libsqlite3-0 libpcap0.8 

indirect jump: the number of instrument point is larger than 2 (2~8)
[REASON] nojump


int inst_count=0, count_taken = 0, count_not = 0, 
count_injmp=0, count_incall=0, count_uncond = 0, count_nojump=0, count_inret;


[] Implementation Process
1. CSIReInst: 
    1) -i, -o, -R different meaning.
    2) Delete instrumentation for tracer and trimmer

2. remove the mainExit:
    Except the initial funtions listed, ingore other unknown initial functions.
    // csi-afl.c: init_addrs();

3. add time for instrumentation
    csi-afl.c: inst_time

4. comment for test:
    CSIDyninst.cpp:1034
    CSIReinst.cpp:946

Instrument a binary

`./CSIDyninst -i ../outputs/target-binaries/target-bins-afl/untracer_bins/tcpdump/tcpdump -o ../outputs/tcpinst -B 
../outputs/tcpdir -O`

Re-instrument the binary

`./CSIReinst -i ../outputs/tcpinst -R ../outputs/target-binaries/target-bins-afl/untracer_bins/tcpdump/tcpdump -o 
../outputs/tcpre -B ../outputs/tcpdir -E ../outputs/tcpdir/ -O`

run csi-afl to test readelf:

```
./csi-afl -i ../outputs/target-binaries/target-bins-afl/untracer_bins/binutils/seed_dir/ -o 
../outputs/readtest -t 500 -- ../outputs/target-binaries/target-bins-afl/untracer_bins/binutils/readelf -a @@
```













